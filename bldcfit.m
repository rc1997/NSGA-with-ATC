function [Y,Xf,Af] = bldcfit(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 04-Nov-2022 14:24:40.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = Qx6 matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = Qx3 matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [0.05;0.08;0.3;0.5;18;0.6119748];
x1_step1.gain = [20.078431372549;50.1960784313726;2.86834733893557;2.0078431372549;0.20078431372549;0.409498296609936];
x1_step1.ymin = -1;

% Layer 1
b1 = [0.30922070695710685007;-0.27135430341906485729;-0.37987457182406558776;0.051866242855225015707;-0.1608740227916730936;-0.35076246220862344893;-1.375866929294775165;0.40912770259101716164;-0.88492832696171497275;0.11356904862392559752;-0.47046962493292315832;-0.25085252464498486447;-0.076486217833315980896;0.92658712496816297843;0.066459614485044907206];
IW1_1 = [0.35977794674563590149 -0.19326767420416529619 -0.16093958696074153747 -0.09168580213671778667 -0.65311795604693145822 0.4840245285840361622;-0.59611155491131384565 0.31443656913341977432 -0.34522536698102213037 -0.062611234161838918988 0.12199579733178322893 -0.73672573660913365234;0.33805971566900366865 0.35688007144180755592 -0.22860127110438702158 -0.46245006384033127134 -0.16088531573081035764 -1.1029265319257557376;0.3513104545292499159 0.036275547481196074306 0.59374788898124142289 -0.057358498249258163537 -0.55635895124909562348 -0.82760118454315123593;-0.36401255701069940018 -0.012953253624824107026 -0.17538368692785805125 0.2631012148437307796 -0.1707619036383347666 -1.4247298660992189223;0.32721610723749372518 -0.17679844436651453998 -0.083341127213506116522 0.72636903103581951235 -0.89051709273535883948 -0.40260977158423250089;-0.15288417599178585893 -0.56152062269860314458 -0.20503806694675863476 0.5706694396975370287 0.14427213498010299508 0.26480522802677841643;0.18484896084185825638 0.091940674618251824746 0.518419792509822841 -0.037497256951617444209 -0.77881028491559955995 -0.49348017885549327888;0.19009443458940961102 -0.080073627516524165104 -0.05802746500959456849 -0.3481697346506075208 0.11734806506379868996 0.036918674306407196772;-0.40960266233783559908 -0.33338847919253122853 0.40118812854899310594 0.43481052563097993824 0.30899040045460890447 0.5928908223111705178;0.91387455880503964956 -0.024418350746936944712 0.47654484739603397703 0.29129682120114896993 0.22790311018242034868 0.13433013952004385638;0.51159812313768726622 -0.41892954569263646247 0.10611616553234798355 0.45656216885855860355 0.048539650108048261468 -0.43082625837653604206;-0.72157362078649378567 -0.33198138252443853968 0.55717277682479748879 0.67688623311860696141 0.54235720931365039021 0.1801723735006910132;0.27117247239444397522 0.094567807452955149339 0.71484550175307515207 -0.066136947496873002561 -1.2932496309071974672 -0.0051005889655673210606;-0.39926045526242909256 0.052843169383071111889 -0.039152470388660778888 -0.70570808404968932148 1.2157810152968655526 -0.3687876935204275064];

% Layer 2
b2 = [-0.067315179721679774261;-0.034141614087384156151;0.13260707428348458836];
LW2_1 = [-0.02253448459636110679 0.091764274468917814143 -0.29568661087600195403 0.0073451753498264635983 0.020514724339430832206 0.044009237987225419131 0.1408996493451099008 0.21360035909196695147 -0.17251570773164781603 -0.19728428046393411965 -0.045054951575417952203 0.17859437356765797689 -0.093978356526675022042 -0.10419377019392793426 0.13795510962977294844;-0.06073116899055729101 0.23395469486742254128 0.22928896547270913309 -0.0017322529160073763844 -0.0069090172504554202282 -0.13896059058929322028 -0.031442590908616910306 -0.012511941442194017896 0.15181484397532965525 -0.20699218948811229368 -0.026326697871540846035 -0.14910273533905724075 -0.12011345214666195591 -0.054632312585873407662 0.091362622192617870542;0.22812820125384511427 0.80452125672891339203 -0.43035646414538641924 -0.32272018285167736185 -0.5469972463821770603 -0.704212079155820736 1.4494274525026318301 0.99629436097456991472 -0.92396796418579929533 -0.68896194426345180872 -0.19738285356231966006 1.2000312801757744285 0.24558411952274833423 -0.45515702188843532028 -0.38141581246120737081];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [3.834697922093;5.12820512820513;0.0399006861157374];
y1_step1.xoffset = [2.827433388;0.26;3.405265161];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
    X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},1); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    X{1,ts} = X{1,ts}';
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
    Y{1,ts} = Y{1,ts}';
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
    Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
